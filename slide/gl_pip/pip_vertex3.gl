#version 130
in vec2 position;
out vec2 texCoord;
out vec4 alpha;

float PI = 3.1415926;
uniform float playTime;
uniform float isPIP;
uniform float mainDuration;
uniform float pipDuration;
uniform float startTime;

uniform float mainWidth;
uniform float mainHeight;
uniform float pipWidth;
uniform float pipHeight;

uniform float scale_w;
uniform float scale_h;
//uniform float scale;

//float aspect = pipWidth / pipHeight;

//const float a[5] = float[5](3.4, 4.2, 5.0, 5.2, 1.1);

void main( void ) {

    //float moveX = 0.0 + progress * (1.0 - step(1.0, scale_w));
    //float moveX = 0.0 + progress * (1.0 - step(1.0, scale_w));
    //float moveX = 0.0;
    //float moveY = progress * isPIP - isPIP * 1.0;
    //float moveY = 0.0;

//  float progress;
    float progress = 0.0;
    float smooth_progress;
    float rotate;
    float aspect;
    float moveX,moveY;
    float scale_i;


//    isPIP2 = 1.0;

    if ( isPIP < 1.0 ) {
//        progress = ( playTime2 - startTime2 ) / pipDuration2;

        if ( playTime >= ( mainDuration - 3.0 ) ) {
            progress = ( playTime - ( mainDuration - 3.0 ) ) / 3.0;
            if ( progress < 0.35 ) {
                progress = 0.0;
                alpha = vec4( 1.0, 0.0, 0.0, 1.0 - progress );
            } else {
                progress = ( progress - 0.35 ) / ( 1.0 - 0.35 );
                alpha = vec4( 1.0, 0.0, 0.0, 1.0 - progress );
            }
        } else {
//            if ( playTime <= 3.0 ) progress = playTime / 3.0;
//            else progress = 0.0;
            progress = 0.0;
            alpha = vec4( 1.0, 0.0, 0.0, 1.0 );
        }

        smooth_progress=smoothstep( 0.0, 1.0, progress );
        rotate = - 360.0 * smooth_progress * ( 1.0 + progress * 1.0 );
        aspect = 1920.0 / 1080.0;
        moveX = 0.0 + smooth_progress;
        moveY = 0.0;
        scale_i = 1.0 - smooth_progress;
    } else {
//        progress = (playTime2 - startTime2) / pipDuration2;

        if ( playTime >= ( mainDuration - 3.0 ) ) {
            progress = ( playTime - ( mainDuration - 3.0 ) ) / 3.0;
            if ( progress > 0.65 ) {
                progress = 1.0;
                alpha = vec4( 0.0, 0.0, 1.0, progress );
            } else {
                progress = progress / 0.65;
                alpha = vec4( 0.0, 0.0, 1.0, progress );
            }
        } else {
//            if ( playTime <= 3.0 ) progress = playTime / 3.0;
//            else progress = 1.0;
            progress = 0.0;
            alpha = vec4( 0.0, 1.0, 2.0, 1.0 );
        }

        smooth_progress = smoothstep( 0.0,1.0,progress );
        rotate = 360.0 * ( 1.0 - smooth_progress ) * ( 1.0 + ( 1.0 - progress ) * 1.0 );
        aspect = 1920.0 / 1080.0;
        moveX = -1.0 + smooth_progress ;
        moveY = 0.0;
        scale_i = smooth_progress;
    }
    float radians = rotate * PI / 180.0;
    float s = sin( radians );
    float c = cos( radians );

    mat4 zRotation = mat4(
            c,             -s * aspect,     0.0,    0.0,
            s / aspect,     c,              0.0,    0.0,
            0.0,            0.0,            1.0,    0.0,
            0.0 + moveX,    0.0 + moveY,    0.0,    1.0 
    );


    texCoord.x = position.x * 0.5 + 0.5;
    texCoord.y = position.y * 0.5 + 0.5;
    gl_Position = zRotation * vec4( scale_i * position, 0, 1 );


    //gl_Position = vec4(scale_i*position , 0, 1);
//    gl_Position = zRotation * vec4(scale * position * vec2(scale_w,scale_h), 0, 1); // zRotation *        
//    gl_Position = vec4(position , 0, 1);
}




















#version 130
in vec2 position;
out vec2 texCoord;
out vec4 alpha;

float PI = 3.1415926;
uniform float playTime;
uniform float isPIP;
uniform float mainDuration;
uniform float pipDuration;
uniform float startTime;

uniform float mainWidth;
uniform float mainHeight;
uniform float pipWidth;
uniform float pipHeight;

uniform float scale_w;
uniform float scale_h;
//uniform float scale;

//float aspect = pipWidth / pipHeight;

//const float a[5] = float[5](3.4, 4.2, 5.0, 5.2, 1.1);

void main( void ) {

    //float moveX = 0.0 + progress * (1.0 - step(1.0, scale_w));
    //float moveX = 0.0 + progress * (1.0 - step(1.0, scale_w));
    //float moveX = 0.0;
    //float moveY = progress * isPIP - isPIP * 1.0;
    //float moveY = 0.0;

//  float progress;
    float progress = 0.0;
    float smooth_progress;
    float rotate;
    float aspect;
    float moveX,moveY;
    float scale_i;


//    isPIP2 = 1.0;

    if ( isPIP < 1.0 ) {
//        progress = ( playTime2 - startTime2 ) / pipDuration2;

        if ( playTime >= ( mainDuration - 3.0 ) ) {
            progress = ( playTime - ( mainDuration - 3.0 ) ) / 3.0;
            if ( progress < 0.35 ) {
                progress = 0.0;
                alpha = vec4( 1.0, 0.0, 0.0, 1.0 - progress );
            } else {
                progress = ( progress - 0.35 ) / ( 1.0 - 0.35 );
                alpha = vec4( 1.0, 0.0, 0.0, 1.0 - progress );
            }
        } else if ( playTime <  3.0 ) {
            if ( progress > 0.65 ) {
                progress = 1.0;
//                alpha = vec4( 0.0, 0.0, 0.0, 0.0 );
                alpha = vec4( 1.0, 0.0, 0.0, progress );
            } else {
                progress = progress / 0.65;
                progress = 1.0;
//                alpha = vec4( 0.0, 0.0, 0.0, 0.0 );
                alpha = vec4( 1.0, 0.0, 0.0, progress );
            }
//            if ( playTime <= 3.0 ) progress = playTime / 3.0;
//            else progress = 0.0;
//            progress = 0.0;
            alpha = vec4( 1.0, 0.0, 0.0, 1.0 );
        } else {
            progress = 0.0;
            alpha = vec4( 1.0, 0.0, 0.0, 1.0 );
        }

        smooth_progress=smoothstep( 0.0, 1.0, progress );
        rotate = - 360.0 * smooth_progress * ( 1.0 + progress * 1.0 );
        aspect = 1920.0 / 1080.0;
        moveX = 0.0 + smooth_progress;
        moveY = 0.0;
        scale_i = 1.0 - smooth_progress;
    } else {
//        progress = (playTime2 - startTime2) / pipDuration2;

        if ( playTime >= ( mainDuration - 3.0 ) ) {
            progress = ( playTime - ( mainDuration - 3.0 ) ) / 3.0;
            if ( progress > 0.65 ) {
                progress = 1.0;
//                alpha = vec4( 0.0, 0.0, 0.0, 0.0 );
                alpha = vec4( 0.0, 0.0, 1.0, progress );
            } else {
                progress = progress / 0.65;
//                alpha = vec4( 0.0, 0.0, 0.0, 0.0 );
                alpha = vec4( 0.0, 0.0, 1.0, progress );
            }
        } else if ( playTime <  3.0 ) {
            progress = playTime / 3.0;
            alpha = vec4( 0.0, 0.0, 1.0, progress );
        } else {
            progress = 1.0;
            alpha = vec4( 0.0, 0.0, 1.0, 1.0 );
        }

        smooth_progress = smoothstep( 0.0,1.0,progress );
        rotate = 360.0 * ( 1.0 - smooth_progress ) * ( 1.0 + ( 1.0 - progress ) * 1.0 );
        aspect = 1920.0 / 1080.0;
        moveX = -1.0 + smooth_progress ;
        moveY = 0.0;
        scale_i = smooth_progress;
    }
    float radians = rotate * PI / 180.0;
    float s = sin( radians );
    float c = cos( radians );

    mat4 zRotation = mat4(
            c,             -s * aspect,     0.0,    0.0,
            s / aspect,     c,              0.0,    0.0,
            0.0,            0.0,            1.0,    0.0,
            0.0 + moveX,    0.0 + moveY,    0.0,    1.0 
    );


    texCoord.x = position.x * 0.5 + 0.5;
    texCoord.y = position.y * 0.5 + 0.5;
    gl_Position = zRotation * vec4( scale_i * position, 0, 1 );


    //gl_Position = vec4(scale_i*position , 0, 1);
//    gl_Position = zRotation * vec4(scale * position * vec2(scale_w,scale_h), 0, 1); // zRotation *        
//    gl_Position = vec4(position , 0, 1);
}
